name: Continuous Integration

on:
  pull_request:
    # Runs on ALL pull requests regardless of target branch
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
      - 'release/**'
  workflow_dispatch: # Allow manual triggers

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Detect what changed to optimize job execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'docker/**'
              - 'docker-compose*.yml'
            frontend:
              - 'src/**'
              - 'public/**'
              - 'package*.json'
              - 'next.config.js'
              - 'tailwind.config.js'
            backend:
              - 'src/app/api/**'
              - 'src/services/**'
              - 'supabase/**'
            docs:
              - 'docs/**'
              - '*.md'

  # Quick checks that should fail fast
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run lint:ts

  # Unit tests - fast and should run on every change
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [changes, lint-and-type-check]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '18.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [changes, lint-and-type-check]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          # CI-specific environment variables for build validation
          NEXT_PUBLIC_SUPABASE_URL: 'https://test.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test-anon-key'
          OPENAI_API_KEY: 'test-api-key'
          SUPABASE_SERVICE_ROLE_KEY: 'test-service-role-key'
          FAIL_ON_ENV_ERROR: 'false'
      
      - name: Check bundle size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          pattern: ".next/static/**/*.{js,css}"
          
  # Security scanning - runs on all changes
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration tests - heavier, runs after other checks pass
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, unit-tests, build]
    if: |
      (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true') &&
      (github.event_name == 'pull_request' || github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          # Test environment variables for integration tests
          NEXT_PUBLIC_SUPABASE_URL: 'https://test.supabase.co'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test-anon-key'
          OPENAI_API_KEY: 'test-api-key'
          SUPABASE_SERVICE_ROLE_KEY: 'test-service-role-key'
          FAIL_ON_ENV_ERROR: 'false'
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Documentation check - only runs if docs changed
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'

  # All checks passed - this is the status check for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, build, security, integration-tests]
    if: always()
    steps:
      - name: Check if all required jobs succeeded
        run: |
          # Check if any required job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          
          # Check if required jobs were skipped (only okay if no relevant changes)
          if [[ "${{ needs.lint-and-type-check.result }}" == "skipped" && \
                "${{ needs.unit-tests.result }}" == "skipped" && \
                "${{ needs.build.result }}" == "skipped" ]]; then
            echo "No code changes detected, skipping CI"
          else
            echo "All CI jobs passed successfully!"
          fi 