version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hep-companion-app
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot-reload
      - .:/app
      # Prevent node_modules from being overwritten by mount
      - /app/node_modules
      # Prevent .next from being overwritten by mount
      - /app/.next
    env_file:
      - .env.docker
    environment:
      # Override any environment variables as needed
      NODE_ENV: development
      WATCHPACK_POLLING: true # For hot-reload on some systems
      # Docker-specific Supabase URLs
      NEXT_PUBLIC_SUPABASE_URL: http://kong:8000
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - hep-network
    depends_on:
      db:
        condition: service_healthy
      kong:
        condition: service_started

  # PostgreSQL Database
  db:
    image: supabase/postgres:15.1.0.117
    container_name: hep-companion-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with migrations
      - ./docker/init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - hep-network

  # PostgREST - REST API
  postgrest:
    image: postgrest/postgrest:v10.1.2
    container_name: hep-companion-postgrest
    environment:
      PGRST_DB_URI: postgres://postgres:postgres@db:5432/postgres
      PGRST_DB_SCHEMA: public,auth,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - hep-network

  # Supabase Studio (Database Management UI)
  studio:
    image: supabase/studio:latest
    container_name: hep-companion-studio
    ports:
      - "3002:3000"
    environment:
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      STUDIO_PG_META_URL: http://pg-meta:8080
    depends_on:
      - db
      - kong
    restart: unless-stopped
    networks:
      - hep-network

  # Supabase Kong API Gateway
  kong:
    image: kong:2.8-alpine
    container_name: hep-companion-kong
    platform: linux/amd64  # Kong 2.8 doesn't have ARM64 support
    ports:
      - "8000:8000"
      - "8443:8443"
    env_file:
      - .env.docker
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_LOG_LEVEL: info
    volumes:
      - ./docker/kong/kong.yml:/var/lib/kong/kong.yml
    restart: unless-stopped
    networks:
      - hep-network

volumes:
  postgres_data:
    driver: local

networks:
  hep-network:
    driver: bridge 